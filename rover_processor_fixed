from imutils.video import FPS
from dronekit import connect
import argparse
import pyrealsense2.pyrealsense2 as rs
from pymavlink import mavutil
import time
import logging
import sys
import utilities.drone_lib as dl
import csv
 
 
# port = "/dev/ttyUSB0" #USB
DEFAULT_BAUD = 115200  # 57600
DEFAULT_DATA_PATH = '/media/usafa/data/rover_data/'
DEFAULT_PORT = "/dev/ttyUSB0"
connection = None
 
def append_ardu_data(throttle, steering, heading, idx, file):
    f = open(file, "a+")
    f.write(f"{throttle},{steering},{heading},{idx}\n")
    f.close()
 
def append_data(data, index, data_file):
    field_names = ['index', 'throttle', 'steering', 'heading']
    data_dict = {'index': index, 'throttle': data[0], 'steering': data[1], 'heading': data[2]}
    csv.DictWriter(data_file,  fieldnames=field_names).writerow(data_dict)
 
def prepare_log_file(log_file):
    pass
    # prepare log file...
    log_formatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")
    root_logger = logging.getLogger()
    file_handler = logging.FileHandler(log_file)
    file_handler.setFormatter(log_formatter)
    root_logger.addHandler(file_handler)
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(log_formatter)
    root_logger.addHandler(console_handler)
 
    #handlers = [logging.FileHandler(log_file), logging.StreamHandler()]
    #logging.basicConfig(level=logging.DEBUG, handlers=handlers)
 
 
def collect_data(bag_file):
    throttle = 0
    steering_mix = 0
    state_update_interval = 30 # (update after every 30 frames)
 
    try:
 
        file_name = bag_file.replace(".bag", ".csv")
        data_file = open(file_name, 'w')
 
        logging.info(f"Recording to be stored in location: {bag_file}.")
        logging.info("Preparing RealSense data streams...")
 
        # Configure depth and color streams
        pipeline = rs.pipeline()
        config = rs.config()
        config.enable_record_to_file(f"{bag_file}")
 
        logging.info("configuring rgb stream.")
        config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)
 
        # Start streaming
        logging.info("Starting camera streams...")
        pipeline.start(config)
 
        fps = FPS().start()
        logging.info("Recording for realsense sensor streams started.")
 
    except Exception as e:
        logging.error("Unexpected error.", exc_info=True)
        return
 
    # loop over the frames from the video stream...
    while connection.armed:
        try:
            # Wait for a coherent pair of frames: depth and color
            frames = pipeline.wait_for_frames()
            bgr_frame = frames.get_color_frame()
 
            if not bgr_frame:
                continue
 
            # For Ardurover channel mapping:
            #    3 is throttle
            #    1 is steering
 
            # get data from device...
            if (not connection.channels['3'] is None
                    and not connection.channels['1'] is None):
                throttle = int(connection.channels['3'])
                steering_mix = int(connection.channels['1'])
 
            heading = connection.heading
 
            frm_num = int(bgr_frame.frame_number)
 
            # write throttle and steering related to current frame...
            #append_ardu_data(throttle=throttle, steering=steering_mix,heading=heading, idx=frm_num,file=ardu_file)
 
            data = [throttle, steering_mix, heading]
            header = ['index', 'throttle', 'steering', 'heading']
 
            writer = csv.writer(data_file)
            writer.writerow(header)
            append_data(data, frm_num, data_file)
 
            if (frm_num % state_update_interval) == 0:
                dl.display_rover_state(connection)
 
            # update the FPS counter
            fps.update()
        except Exception as e:
            logging.error("Unexpected error while streaming.", exc_info=True)
            break
